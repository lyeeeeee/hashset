// +build ignore

package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"os"
	"strings"
)

var lengthFunction = `func (s *Int64Set) Len() int {
	return len(*s)
}`

func main() {
	f, err := os.Open("hashset.go")
	if err != nil {
		panic(err)
	}
	filedata, err := ioutil.ReadAll(f)
	if err != nil {
		panic(err)
	}
	w := new(bytes.Buffer)
	w.WriteString(`// Code generated by go run types_gen.go; DO NOT EDIT.` + "\r\n")
	w.WriteString(string(filedata)[strings.Index(string(filedata), "package hashset") : strings.Index(string(filedata), "\n")+1])

	ts := []string{"Float32", "Float64", "Int32", "Int16", "Int", "Uint64", "Uint32", "Uint16", "Uint"} // all types need to be converted
	for _, upper := range ts {
		lower := strings.ToLower(upper)
		data := string(filedata)
		// Remove header.
		data = data[strings.Index(data, "\n")+1:]
		// Remove the special case.
		data = strings.Replace(data, lengthFunction, "", -1)
		// Common cases.
		data = strings.Replace(data, "int64", lower, -1)
		data = strings.Replace(data, "Int64", upper, -1)
		if inSlice(lowerSlice(ts), lower) {
			data = strings.Replace(data, "length "+lower, "length int64", 1)
		}
		// Add the special case.
		data = data + strings.Replace(lengthFunction, "Int64Set", upper+"Set", 1)
		w.WriteString(data)
		w.WriteString("\r\n")
	}

	out, err := format.Source(w.Bytes())
	if err != nil {
		panic(err)
	}
	if err := ioutil.WriteFile("types.go", out, 0660); err != nil {
		panic(err)
	}
}

func lowerSlice(s []string) []string {
	n := make([]string, len(s))
	for i, v := range s {
		n[i] = strings.ToLower(v)
	}
	return n
}

func inSlice(s []string, val string) bool {
	for _, v := range s {
		if v == val {
			return true
		}
	}
	return false
}
