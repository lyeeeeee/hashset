// Code generated by go run types_gen.go; DO NOT EDIT.
package hashset

import ()

type Float32Set struct {
	set    map[float32]struct{}
	length int64
}

func NewFloat32() *Float32Set {
	result := Float32Set{make(map[float32]struct{}), 0}
	return &result
}

func (s *Float32Set) Add(value float32) bool {
	if s.Contains(value) {
		return false
	}
	(*s).length++
	(*s).set[value] = struct{}{}
	return true
}

func (s *Float32Set) Contains(value float32) bool {
	if _, ok := (*s).set[value]; ok {
		return true
	}
	return false
}

func (s *Float32Set) Remove(value float32) bool {
	if s.Contains(value) {
		delete((*s).set, value)
		(*s).length--
		return true
	}
	return false
}

func (s *Float32Set) Range(f func(value float32) bool) {
	for k, _ := range (*s).set {
		f(k)
	}
}

func (s *Float32Set) Len() int {
	return int(len((*s).set))
}

type Float64Set struct {
	set    map[float64]struct{}
	length int64
}

func NewFloat64() *Float64Set {
	result := Float64Set{make(map[float64]struct{}), 0}
	return &result
}

func (s *Float64Set) Add(value float64) bool {
	if s.Contains(value) {
		return false
	}
	(*s).length++
	(*s).set[value] = struct{}{}
	return true
}

func (s *Float64Set) Contains(value float64) bool {
	if _, ok := (*s).set[value]; ok {
		return true
	}
	return false
}

func (s *Float64Set) Remove(value float64) bool {
	if s.Contains(value) {
		delete((*s).set, value)
		(*s).length--
		return true
	}
	return false
}

func (s *Float64Set) Range(f func(value float64) bool) {
	for k, _ := range (*s).set {
		f(k)
	}
}

func (s *Float64Set) Len() int {
	return int(len((*s).set))
}

type Int32Set struct {
	set    map[int32]struct{}
	length int64
}

func NewInt32() *Int32Set {
	result := Int32Set{make(map[int32]struct{}), 0}
	return &result
}

func (s *Int32Set) Add(value int32) bool {
	if s.Contains(value) {
		return false
	}
	(*s).length++
	(*s).set[value] = struct{}{}
	return true
}

func (s *Int32Set) Contains(value int32) bool {
	if _, ok := (*s).set[value]; ok {
		return true
	}
	return false
}

func (s *Int32Set) Remove(value int32) bool {
	if s.Contains(value) {
		delete((*s).set, value)
		(*s).length--
		return true
	}
	return false
}

func (s *Int32Set) Range(f func(value int32) bool) {
	for k, _ := range (*s).set {
		f(k)
	}
}

func (s *Int32Set) Len() int {
	return int(len((*s).set))
}

type Int16Set struct {
	set    map[int16]struct{}
	length int64
}

func NewInt16() *Int16Set {
	result := Int16Set{make(map[int16]struct{}), 0}
	return &result
}

func (s *Int16Set) Add(value int16) bool {
	if s.Contains(value) {
		return false
	}
	(*s).length++
	(*s).set[value] = struct{}{}
	return true
}

func (s *Int16Set) Contains(value int16) bool {
	if _, ok := (*s).set[value]; ok {
		return true
	}
	return false
}

func (s *Int16Set) Remove(value int16) bool {
	if s.Contains(value) {
		delete((*s).set, value)
		(*s).length--
		return true
	}
	return false
}

func (s *Int16Set) Range(f func(value int16) bool) {
	for k, _ := range (*s).set {
		f(k)
	}
}

func (s *Int16Set) Len() int {
	return int(len((*s).set))
}

type IntSet struct {
	set    map[int]struct{}
	length int64
}

func NewInt() *IntSet {
	result := IntSet{make(map[int]struct{}), 0}
	return &result
}

func (s *IntSet) Add(value int) bool {
	if s.Contains(value) {
		return false
	}
	(*s).length++
	(*s).set[value] = struct{}{}
	return true
}

func (s *IntSet) Contains(value int) bool {
	if _, ok := (*s).set[value]; ok {
		return true
	}
	return false
}

func (s *IntSet) Remove(value int) bool {
	if s.Contains(value) {
		delete((*s).set, value)
		(*s).length--
		return true
	}
	return false
}

func (s *IntSet) Range(f func(value int) bool) {
	for k, _ := range (*s).set {
		f(k)
	}
}

func (s *IntSet) Len() int {
	return int(len((*s).set))
}

type Uint64Set struct {
	set    map[uint64]struct{}
	length int64
}

func NewUint64() *Uint64Set {
	result := Uint64Set{make(map[uint64]struct{}), 0}
	return &result
}

func (s *Uint64Set) Add(value uint64) bool {
	if s.Contains(value) {
		return false
	}
	(*s).length++
	(*s).set[value] = struct{}{}
	return true
}

func (s *Uint64Set) Contains(value uint64) bool {
	if _, ok := (*s).set[value]; ok {
		return true
	}
	return false
}

func (s *Uint64Set) Remove(value uint64) bool {
	if s.Contains(value) {
		delete((*s).set, value)
		(*s).length--
		return true
	}
	return false
}

func (s *Uint64Set) Range(f func(value uint64) bool) {
	for k, _ := range (*s).set {
		f(k)
	}
}

func (s *Uint64Set) Len() int {
	return int(len((*s).set))
}

type Uint32Set struct {
	set    map[uint32]struct{}
	length int64
}

func NewUint32() *Uint32Set {
	result := Uint32Set{make(map[uint32]struct{}), 0}
	return &result
}

func (s *Uint32Set) Add(value uint32) bool {
	if s.Contains(value) {
		return false
	}
	(*s).length++
	(*s).set[value] = struct{}{}
	return true
}

func (s *Uint32Set) Contains(value uint32) bool {
	if _, ok := (*s).set[value]; ok {
		return true
	}
	return false
}

func (s *Uint32Set) Remove(value uint32) bool {
	if s.Contains(value) {
		delete((*s).set, value)
		(*s).length--
		return true
	}
	return false
}

func (s *Uint32Set) Range(f func(value uint32) bool) {
	for k, _ := range (*s).set {
		f(k)
	}
}

func (s *Uint32Set) Len() int {
	return int(len((*s).set))
}

type Uint16Set struct {
	set    map[uint16]struct{}
	length int64
}

func NewUint16() *Uint16Set {
	result := Uint16Set{make(map[uint16]struct{}), 0}
	return &result
}

func (s *Uint16Set) Add(value uint16) bool {
	if s.Contains(value) {
		return false
	}
	(*s).length++
	(*s).set[value] = struct{}{}
	return true
}

func (s *Uint16Set) Contains(value uint16) bool {
	if _, ok := (*s).set[value]; ok {
		return true
	}
	return false
}

func (s *Uint16Set) Remove(value uint16) bool {
	if s.Contains(value) {
		delete((*s).set, value)
		(*s).length--
		return true
	}
	return false
}

func (s *Uint16Set) Range(f func(value uint16) bool) {
	for k, _ := range (*s).set {
		f(k)
	}
}

func (s *Uint16Set) Len() int {
	return int(len((*s).set))
}

type UintSet struct {
	set    map[uint]struct{}
	length int64
}

func NewUint() *UintSet {
	result := UintSet{make(map[uint]struct{}), 0}
	return &result
}

func (s *UintSet) Add(value uint) bool {
	if s.Contains(value) {
		return false
	}
	(*s).length++
	(*s).set[value] = struct{}{}
	return true
}

func (s *UintSet) Contains(value uint) bool {
	if _, ok := (*s).set[value]; ok {
		return true
	}
	return false
}

func (s *UintSet) Remove(value uint) bool {
	if s.Contains(value) {
		delete((*s).set, value)
		(*s).length--
		return true
	}
	return false
}

func (s *UintSet) Range(f func(value uint) bool) {
	for k, _ := range (*s).set {
		f(k)
	}
}

func (s *UintSet) Len() int {
	return int(len((*s).set))
}

type Int64Set struct {
	set    map[int64]struct{}
	length int64
}

func NewInt64() *Int64Set {
	result := Int64Set{make(map[int64]struct{}), 0}
	return &result
}

func (s *Int64Set) Add(value int64) bool {
	if s.Contains(value) {
		return false
	}
	(*s).length++
	(*s).set[value] = struct{}{}
	return true
}

func (s *Int64Set) Contains(value int64) bool {
	if _, ok := (*s).set[value]; ok {
		return true
	}
	return false
}

func (s *Int64Set) Remove(value int64) bool {
	if s.Contains(value) {
		delete((*s).set, value)
		(*s).length--
		return true
	}
	return false
}

func (s *Int64Set) Range(f func(value int64) bool) {
	for k, _ := range (*s).set {
		f(k)
	}
}

func (s *Int64Set) Len() int {
	return int(len((*s).set))
}
