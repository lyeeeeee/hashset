// Code generated by go run types_gen.go; DO NOT EDIT.
package hashset

type Float32Set map[float32]struct{}

func NewFloat32() *Float32Set {
	return &Float32Set{}
}

func (s *Float32Set) Add(value float32) {
	(*s)[value] = struct{}{}
}

func (s *Float32Set) Contains(value float32) bool {
	if _, ok := (*s)[value]; ok {
		return true
	}
	return false
}

func (s *Float32Set) Remove(value float32) bool {
	if s.Contains(value) {
		delete(*s, value)
		return true
	}
	return false
}

func (s *Float32Set) Range(f func(value float32) bool) {
	for k := range *s {
		if !f(k) {
			break
		}
	}
}

func (s *Float32Set) Len() int {
	return len(*s)
}

type Float64Set map[float64]struct{}

func NewFloat64() *Float64Set {
	return &Float64Set{}
}

func (s *Float64Set) Add(value float64) {
	(*s)[value] = struct{}{}
}

func (s *Float64Set) Contains(value float64) bool {
	if _, ok := (*s)[value]; ok {
		return true
	}
	return false
}

func (s *Float64Set) Remove(value float64) bool {
	if s.Contains(value) {
		delete(*s, value)
		return true
	}
	return false
}

func (s *Float64Set) Range(f func(value float64) bool) {
	for k := range *s {
		if !f(k) {
			break
		}
	}
}

func (s *Float64Set) Len() int {
	return len(*s)
}

type Int32Set map[int32]struct{}

func NewInt32() *Int32Set {
	return &Int32Set{}
}

func (s *Int32Set) Add(value int32) {
	(*s)[value] = struct{}{}
}

func (s *Int32Set) Contains(value int32) bool {
	if _, ok := (*s)[value]; ok {
		return true
	}
	return false
}

func (s *Int32Set) Remove(value int32) bool {
	if s.Contains(value) {
		delete(*s, value)
		return true
	}
	return false
}

func (s *Int32Set) Range(f func(value int32) bool) {
	for k := range *s {
		if !f(k) {
			break
		}
	}
}

func (s *Int32Set) Len() int {
	return len(*s)
}

type Int16Set map[int16]struct{}

func NewInt16() *Int16Set {
	return &Int16Set{}
}

func (s *Int16Set) Add(value int16) {
	(*s)[value] = struct{}{}
}

func (s *Int16Set) Contains(value int16) bool {
	if _, ok := (*s)[value]; ok {
		return true
	}
	return false
}

func (s *Int16Set) Remove(value int16) bool {
	if s.Contains(value) {
		delete(*s, value)
		return true
	}
	return false
}

func (s *Int16Set) Range(f func(value int16) bool) {
	for k := range *s {
		if !f(k) {
			break
		}
	}
}

func (s *Int16Set) Len() int {
	return len(*s)
}

type IntSet map[int]struct{}

func NewInt() *IntSet {
	return &IntSet{}
}

func (s *IntSet) Add(value int) {
	(*s)[value] = struct{}{}
}

func (s *IntSet) Contains(value int) bool {
	if _, ok := (*s)[value]; ok {
		return true
	}
	return false
}

func (s *IntSet) Remove(value int) bool {
	if s.Contains(value) {
		delete(*s, value)
		return true
	}
	return false
}

func (s *IntSet) Range(f func(value int) bool) {
	for k := range *s {
		if !f(k) {
			break
		}
	}
}

func (s *IntSet) Len() int {
	return len(*s)
}

type Uint64Set map[uint64]struct{}

func NewUint64() *Uint64Set {
	return &Uint64Set{}
}

func (s *Uint64Set) Add(value uint64) {
	(*s)[value] = struct{}{}
}

func (s *Uint64Set) Contains(value uint64) bool {
	if _, ok := (*s)[value]; ok {
		return true
	}
	return false
}

func (s *Uint64Set) Remove(value uint64) bool {
	if s.Contains(value) {
		delete(*s, value)
		return true
	}
	return false
}

func (s *Uint64Set) Range(f func(value uint64) bool) {
	for k := range *s {
		if !f(k) {
			break
		}
	}
}

func (s *Uint64Set) Len() int {
	return len(*s)
}

type Uint32Set map[uint32]struct{}

func NewUint32() *Uint32Set {
	return &Uint32Set{}
}

func (s *Uint32Set) Add(value uint32) {
	(*s)[value] = struct{}{}
}

func (s *Uint32Set) Contains(value uint32) bool {
	if _, ok := (*s)[value]; ok {
		return true
	}
	return false
}

func (s *Uint32Set) Remove(value uint32) bool {
	if s.Contains(value) {
		delete(*s, value)
		return true
	}
	return false
}

func (s *Uint32Set) Range(f func(value uint32) bool) {
	for k := range *s {
		if !f(k) {
			break
		}
	}
}

func (s *Uint32Set) Len() int {
	return len(*s)
}

type Uint16Set map[uint16]struct{}

func NewUint16() *Uint16Set {
	return &Uint16Set{}
}

func (s *Uint16Set) Add(value uint16) {
	(*s)[value] = struct{}{}
}

func (s *Uint16Set) Contains(value uint16) bool {
	if _, ok := (*s)[value]; ok {
		return true
	}
	return false
}

func (s *Uint16Set) Remove(value uint16) bool {
	if s.Contains(value) {
		delete(*s, value)
		return true
	}
	return false
}

func (s *Uint16Set) Range(f func(value uint16) bool) {
	for k := range *s {
		if !f(k) {
			break
		}
	}
}

func (s *Uint16Set) Len() int {
	return len(*s)
}

type UintSet map[uint]struct{}

func NewUint() *UintSet {
	return &UintSet{}
}

func (s *UintSet) Add(value uint) {
	(*s)[value] = struct{}{}
}

func (s *UintSet) Contains(value uint) bool {
	if _, ok := (*s)[value]; ok {
		return true
	}
	return false
}

func (s *UintSet) Remove(value uint) bool {
	if s.Contains(value) {
		delete(*s, value)
		return true
	}
	return false
}

func (s *UintSet) Range(f func(value uint) bool) {
	for k := range *s {
		if !f(k) {
			break
		}
	}
}

func (s *UintSet) Len() int {
	return len(*s)
}
